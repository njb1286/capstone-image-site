import { useSelector } from "react-redux";
import { errorComponent } from "./ContentPage";
import { backendUrl } from "../store/backend-url";
import { useNavigate } from "react-router";
import { useUpdateImageItems } from "../hooks/useUpdateImageItems";
import { Category, ImageState } from "../store/images-store";
import { useUploadForm } from "../hooks/useUploadForm";

function UpdatePage() {
  const navigate = useNavigate();
  const updateImagesState = useUpdateImageItems();
  const searchParams = new URLSearchParams(location.search);
  const selector = useSelector((state: ImageState) => state.imageItems);

  const id = searchParams.get("id");

  if (!id) {
    return errorComponent;
  }

  const imageData = selector.find(item => item.id === +id);

  if (!imageData) {
    return errorComponent;
  }

  async function submitHandler(title: string, description: string, image: File | null, category: Category) {

    const formData = new FormData();

    formData.append("image", image!);
    formData.append("title", title);
    formData.append("description", description);
    formData.append("id", id!);
    formData.append("category", category);

    const response = await fetch(`${backendUrl}/update?id=${id}`, {
      method: "POST",
      body: formData,
    });

    if (response.status > 299) {
      errorHandler();
      return;
    }

    // Note: because the ID is generated by the database, we need to reload the items
    updateImagesState();
    navigate(`/views?id=${id}`);
  }

  const [uploadForm, errorHandler] = useUploadForm({
    id: +id,
    onSubmit: submitHandler,
    updating: true,
    title: imageData.title,
    description: imageData.description,
    category: imageData.category,
  });

  return uploadForm;
}

export default UpdatePage;